#include "tasks.h"
#include "ui_tasks.h"

tasks::tasks(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::tasks)
{
    ui->setupUi(this);
}

tasks::~tasks()
{
    delete ui;
}

void tasks::on_pushButton_6_clicked() // посмоттерть статистику
{
    // отправляем серверу запрос statistics и принимаем данные статистики по сокету
    QString query = "statistics";
    qDebug()<< query;
    QString stat = "Пока не реализовано";                                                      // ПОМЕНЯТЬ
    QMessageBox::about(this, "Статистика", stat);
}


void tasks::on_pushButton_clicked() // task1
{
    this->hide();
    task1 *a = new task1;
    a->show();

// создать форму с задачей 1, там будет текст задачи с рандомными числами,
// генерируем там рандомные числа для варианта
// даём пользователю возможность ввести число, считываем это число
// изменяем ф-цию task на сервере (её аргументы, создаём в ней проверку ответа на задачу пользователя, в зависимости от этого '+' или '-' на сервере)
// передаём сгенерированные числа на задачу и ответ пользователя серверу, сервер отправляет правильно или нет и обращается к БД
// говорим пользователю, правильный его ответ или нет
// даём возможность выйти из формы с задачей 1 в форму tasks
}


void tasks::on_pushButton_3_clicked() //task2
{
    // создаём возможность попасть в форму с задачей 2
    // создать форму с задачей 2, там будет текст задачи с рандомными числами,
    // генерируем там рандомные числа для варианта
    // даём пользователю возможность ввести число, считываем это число
    // изменяем ф-цию task на сервере (её аргументы, создаём в ней проверку ответа на задачу пользователя, в зависимости от этого '+' или '-' на сервере)
    // передаём сгенерированные числа на задачу и ответ пользователя серверу, сервер отправляет правильно или нет и обращается к БД
    // говорим пользователю, правильный его ответ или нет
    // даём возможность выйти из формы с задачей 2 в форму tasks

}


void tasks::on_pushButton_2_clicked() //task3
{
    // создаём возможность попасть в форму с задачей 3
    // создать форму с задачей 3, там будет текст задачи с рандомными числами,
    // генерируем там рандомные числа для варианта
    // даём пользователю возможность ввести число, считываем это число
    // изменяем ф-цию task на сервере (её аргументы, создаём в ней проверку ответа на задачу пользователя, в зависимости от этого '+' или '-' на сервере)
    // передаём сгенерированные числа на задачу и ответ пользователя серверу, сервер отправляет правильно или нет и обращается к БД
    // говорим пользователю, правильный его ответ или нет
    // даём возможность выйти из формы с задачей 3 в форму tasks
}


void tasks::on_pushButton_4_clicked() //task4
{
    // создаём возможность попасть в форму с задачей 4
    // создать форму с задачей 4, там будет текст задачи с рандомными числами,
    // генерируем там рандомные числа для варианта
    // даём пользователю возможность ввести число, считываем это число
    // изменяем ф-цию task на сервере (её аргументы, создаём в ней проверку ответа на задачу пользователя, в зависимости от этого '+' или '-' на сервере)
    // передаём сгенерированные числа на задачу и ответ пользователя серверу, сервер отправляет правильно или нет и обращается к БД
    // говорим пользователю, правильный его ответ или нет
    // даём возможность выйти из формы с задачей 4 в форму tasks
}


void tasks::on_pushButton_5_clicked() //вернуться в авторизацию
{
    this->hide();
    MainWindow *a = new MainWindow;
    a->show();
}

